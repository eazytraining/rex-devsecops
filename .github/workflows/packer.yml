---
name: Build AMI For Rex DevSecOps

on:
  push:
    branches: [hashicorp]
    paths: ['packer/**']
  workflow_dispatch:

jobs:
  # build-base:
  #   name: Build Base AMI
  #   runs-on: ubuntu-latest
  #   outputs:
  #     image-id: ${{ steps.build.outputs.image-id }}
  #     image-name: ${{ steps.build.outputs.image-name }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup Packer
  #       uses: hashicorp/setup-packer@main
  #       with:
  #         version: "1.9.4"

  #     - name: Build Base Image
  #       id: build
  #       run: |
  #         cd packer/init_image
  #         packer init .
  #         packer build .

  #         IMAGE_ID=$(jq -r '.builds[0].custom_data.image_id' manifest.json)
  #         IMAGE_NAME=$(jq -r '.builds[0].custom_data.image_name' manifest.json)

  #         echo "image-id=$IMAGE_ID" >> $GITHUB_OUTPUT
  #         echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         PACKER_GITHUB_API_TOKEN: ${{ secrets.PACKER_GITHUB_API_TOKEN }}

  # build-docker:
    name: Build Docker Image
    # needs: build-base
    runs-on: ubuntu-latest
    outputs:
      image-id: ${{ steps.build.outputs.image-id }}
      image-name: ${{ steps.build.outputs.image-name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.4"

      - name: Build Docker Image
        id: build
        run: |
          cd packer/docker_image
          packer init .
          packer build  .

          IMAGE_ID=$(jq -r '.builds[0].custom_data.image_id' manifest.json)
          IMAGE_NAME=$(jq -r '.builds[0].custom_data.image_name' manifest.json)

          echo "image-id=$IMAGE_ID" >> $GITHUB_OUTPUT
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKER_GITHUB_API_TOKEN: ${{ secrets.PACKER_GITHUB_API_TOKEN }}

  build-k3s:
    name: Build K3s Image
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.4"

      - name: Build K3s Image
        run: |
          cd packer/k3s_image
          packer init .
          packer build  .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKER_GITHUB_API_TOKEN: ${{ secrets.PACKER_GITHUB_API_TOKEN }}
  build-k8s-master:
    name: Build kube Master Image
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.4"

      - name: Build kube Master Image
        run: |
          cd packer/kube_master_image
          packer init .
          packer build  .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKER_GITHUB_API_TOKEN: ${{ secrets.PACKER_GITHUB_API_TOKEN }}
  build-k8s-worker:
    name: Build kube Worker Image
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.4"

      - name: Build kube Worker Image
        run: |
          cd packer/kube_worker_image
          packer init .
          packer build  .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKER_GITHUB_API_TOKEN: ${{ secrets.PACKER_GITHUB_API_TOKEN }}
